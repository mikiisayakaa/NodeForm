#include "verticalnodeobject.h"
#include "Global/globaluiparams.h"
#include "Global/globalqmlfiles.h"
#include "Global/globalitems.h"

#include <QDebug>


void Nodest::VerticalNodeObject::createWidgets()
{
    QObject* root = NodestGlobal::globalRootObject;
    QQuickItem* rootItem = qobject_cast<QQuickItem*>(root);


    if (NodestGlobal::uiMap.find(m_node->getNameID()) != NodestGlobal::uiMap.end()){
        NodestGlobal::UIParameters params = NodestGlobal::uiMap[m_node->getNameID()];
        return;
    }
    else{
        //use default settings, select the first proper widget to use

        //create nodeBase and set it to root
        createBase(NodestGlobal::nodeBaseMap.begin().key(), rootItem, m_baseItem);

        //qDebug() << m_baseItem;

        //create node name label
        createTextLabel(NodestGlobal::textLabelMap.begin().key(), m_baseItem,
                        m_nodeNameItem, m_node->getNameID());

        //create input widgets
        for (size_t i = 0; i < m_node->getNInput(); i++){
            createHandle(NodestGlobal::slotHandleMap.begin().key(), m_baseItem,
                         m_inputItems[0][i]);
            createTextLabel(NodestGlobal::textLabelMap.begin().key(), m_baseItem,
                            m_inputItems[1][i], m_node->getSlotTypeName(0, i));

            int typeID = m_inputSetters[i]->getID();
            for (auto iter = NodestGlobal::slotSetterMap.begin();
                 iter != NodestGlobal::slotSetterMap.end(); iter++){
                if (iter.value().type == typeID){
                    createSetter(iter.key(), m_baseItem, m_inputItems[2][i]);
                    break;
                }
            }
        }

        //create output widgets
        for (size_t i = 0; i < m_node->getNOutput(); i++){
            createHandle(NodestGlobal::slotHandleMap.begin().key(), m_baseItem,
                         m_outputItems[0][i]);
            createTextLabel(NodestGlobal::textLabelMap.begin().key(), m_baseItem,
                            m_outputItems[1][i], m_node->getSlotTypeName(0, i));
        }

        bindSetters();

    }

}

void Nodest::VerticalNodeObject::setWidgetsLayout()
{
    //users make sure that all widgets are not nullptr (even some are invisible)
    QQuickItem* lastItem;
    m_baseItem->setProperty("width", m_baseItem->childrenRect().width() + 20);
    lastItem = m_baseItem;

    //put the node name label at center top
    setAnchors(m_nodeNameItem, lastItem, "top", "top");
    setAnchors(m_nodeNameItem, lastItem, "horizontalCenter", "horizontalCenter");
    lastItem = m_nodeNameItem;

    //arrange the output widgets
    //put the first output handle and textlabel
    setAnchors(m_outputItems[0][0], m_baseItem, "horizontalCenter", "right");
    setAnchors(m_outputItems[0][0], lastItem, "top", "bottom");
    lastItem = m_outputItems[0][0];
    setAnchors(m_outputItems[1][0], lastItem, "right", "left");
    setAnchors(m_outputItems[1][0], lastItem, "verticalCenter", "verticalCenter");

    //put the rest output handles and textlabels
    for (size_t i = 1; i < m_node->getNOutput(); i++){
        setAnchors(m_outputItems[0][i], lastItem, "top", "bottom");
        setAnchors(m_outputItems[0][i], lastItem, "horizontalCenter", "horizontalCenter");
        lastItem = m_outputItems[0][i];
        setAnchors(m_outputItems[1][i], lastItem, "right", "left");
        setAnchors(m_outputItems[1][i], lastItem, "verticalCenter", "verticalCenter");
    }
    
    //arrange the input widg
}
